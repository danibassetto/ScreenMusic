@page "/register"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationServiceClient authenticationServiceClient
@inject NavigationManager navigationManager
@attribute [AllowAnonymous]

<MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">
    <ErrorAlert ErrorMessage="@errorMessage" />

    <MudForm>       
        <MudTextField T="string" Label="Email" @bind-Value="email"
                      Variant="Variant.Outlined" Class="my-4"
                      Required="true" RequiredError="Email obrigatório!"/>

        <MudTextField @bind-Value="password" Label="Senha" Variant="Variant.Outlined" Class="my-4"
                      InputType="@PasswordInput" Adornment="Adornment.End" Required="true" RequiredError="Senha obrigatória!"
                      AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Mostrar senha" />

        <MudTextField @bind-Value="confirmPassword" Label="Confirme sua senha" Variant="Variant.Outlined" Class="my-4"
                      InputType="@PasswordInput" Adornment="Adornment.End" Required="true" RequiredError="Senha obrigatória!"
                      AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Mostrar senha" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   Class="my-6" @onclick="RegisterInto">
            Registrar
        </MudButton>

        <MudText Class="mt-4">
            Já tem uma conta? <MudLink Href="/login">Efetue login</MudLink>
        </MudText>
    </MudForm>
</MudPaper>

@code {
    private string? email;
    private string? password;
    private string? confirmPassword;
    private string? errorMessage;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task RegisterInto()
    {
        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password) || string.IsNullOrEmpty(confirmPassword))
            errorMessage = "Necessário informar todos os campos";
        else if (confirmPassword != password)
            errorMessage = "As senhas não são iguais!";
        else
        {
            var response = await authenticationServiceClient.Register(email!, password!);
            if (response.IsSuccess)
                navigationManager.NavigateTo($"/login?email={email}&password={password}");
            else
                errorMessage = response.Error ?? "Erro ao registrar-se.";
        }
    }

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}