@page "/CreateArtist"
@using ScreenMusic.Arguments
@inject ArtistServiceClient artistServiceClient
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Cadastro do Artista</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista" Variant="Variant.Outlined" @bind-Value="name" Required="true" RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista" Variant="Variant.Outlined" @bind-Value="biography" Lines="4" Required="true" RequiredError="Campo obrigatório." />

        <MudImage Class="mt-4" src="@fileImage" />
        <MudFileUpload T="IBrowserFile" Accept=".jpeg;,.jpg,.png" FilesChanged="UploadFile">
            <ButtonTemplate>
                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FileUpload" for="@context">Foto de Perfil</MudButton>
            </ButtonTemplate>
        </MudFileUpload>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudText Class="mt-4" Color="Color.Error">@errorMessage</MudText>
        }

        <div class="d-flex justify-space-between align-center mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="Return">Voltar</MudButton>
            <div>
                <MudButton Variant="Variant.Filled" @onclick="Create" Color="Color.Primary" Class="ml-auto">Cadastrar</MudButton>
            </div>
        </div>

    </MudForm>
</MudPaper>

@code {
    private string? name;
    private string? biography;
    private string? fileImage;
    private string? profilePhoto;
    private string? errorMessage;

    private async Task Create()
    {
        errorMessage = null; // Reset error message

        var request = new InputCreateArtist(name!, profilePhoto!, biography!);
        bool success = await artistServiceClient.Create(request);

        if (success)
        {
            navigationManager.NavigateTo("/Artist");
        }
        else
        {
            errorMessage = "Erro ao criar artista. Verifique se o artista já existe.";
        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        var format = "image/jpeg";
        var resizedImage = await file.RequestImageFileAsync(format, 200, 200);

        using var fileStream = resizedImage.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        var imageUpload = Convert.ToBase64String(memoryStream.ToArray());
        fileImage = $"data:{format};base64,{imageUpload}";
        profilePhoto = imageUpload;
    }

    private void Return()
    {
        navigationManager.NavigateTo("/Artist");
    }
}