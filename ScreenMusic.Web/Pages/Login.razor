@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationServiceClient authenticationServiceClient
@inject NavigationManager navigationManager
@attribute [AllowAnonymous]

<MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">
            @errorMessage
        </MudAlert>
    }
    <AuthorizeView>
        <Authorized>
            <p>Você está conectado como @context.User.Identity!.Name </p>
        </Authorized>
        <NotAuthorized>
            <MudForm>
                <MudTextField T="string" Label="Email" @bind-Value="email"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Email obrigatório!" />

                <MudTextField @bind-Value="password" Label="Senha" Variant="Variant.Outlined" 
                              InputType="@PasswordInput" Adornment="Adornment.End" Required="true" RequiredError="Senha obrigatória!"
                              AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Mostrar senha" Class="my-4"/>


                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-6" @onclick="LogInto">Login</MudButton>

                <MudText Class="mt-4">
                    Não tem uma conta? <MudLink Href="/register">Registre-se</MudLink>
                </MudText>
            </MudForm>
        </NotAuthorized>
    </AuthorizeView>
</MudPaper>

@code {
    private string? email;
    private string? password;
    private string? errorMessage;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override void OnParametersSet()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query["email"] != null && query["password"] != null)
        {
            email = query["email"];
            password = query["password"];
        }
    }

    private async Task LogInto()
    {
        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
            errorMessage = "Necessário informar todos os campos";
        else
        {
            var response = await authenticationServiceClient.Login(email!, password!);
            if (response.IsSuccess && ReturnUrl is not null)
                navigationManager.NavigateTo(ReturnUrl);
            else
                errorMessage = response.Error ?? "Erro ao efetuar login.";
        }
    }

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}