@page "/EditarArtista/{NomeArtista}"
@using ScreenMusic.Arguments
@inject ArtistAPI artistasAPI
@inject NavigationManager navigationManager

@if (Artist is not null)
{
    <MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

        <MudText Class="mt-8" Typo="Typo.h4">Edição de Artista</MudText>

        <MudForm>

            <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
                          Variant="Variant.Outlined"
                          @bind-Value="name"
                          Required="true"
                          RequiredError="Campo obrigatório." />

            <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
                          Variant="Variant.Outlined"
                          @bind-Value="biography"
                          Lines="4"
                          Required="true"
                          RequiredError="Campo obrigatório." />

            <div class="d-flex align-center justify-space-between mt-4">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto"
                           @onclick="Editar">
                    Salvar
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           @onclick="Deletar"
                           Color="Color.Secondary"
                           Class="ml-3">
                    Deletar
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Info"
                           Class="ml-3"
                           @onclick="VoltarParaListagem">
                    Voltar
                </MudButton>
            </div>

        </MudForm>
    </MudPaper>
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}

@code {
    private string? name;
    private string? biography;
    [Parameter]
    public string? NameArtist { get; set; }

    public OutputArtist? Artist { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artist = await artistasAPI.GetByName(new InputIdentifierArtist(NameArtist!));
        name = Artist!.Name;
        biography = Artist!.Biography;
    }

    private async Task Deletar()
    {
        await artistasAPI.Delete(Artist!.Id);
        navigationManager.NavigateTo("/Artist");
    }

    private async Task Editar()
    {
        var requestEdit = new InputUpdateArtist(name!, biography!, Artist!.ProfilePhoto!);
        await artistasAPI.Update(Artist!.Id, requestEdit);
        navigationManager.NavigateTo("/Artist");
    }

    private void VoltarParaListagem()
    {
        navigationManager.NavigateTo("/Artist");
    }
}