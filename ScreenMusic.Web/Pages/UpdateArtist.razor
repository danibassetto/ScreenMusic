@page "/UpdateArtist/{Name}"
@using ScreenMusic.Arguments
@inject ArtistServiceClient artistServiceClient
@inject NavigationManager navigationManager

@if (OutputArtist is not null)
{
    <MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

        <MudText Class="mt-8" Typo="Typo.h4">Edição de Artista</MudText>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error">
                @errorMessage
            </MudAlert>
        }

        <MudForm>
            <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista" ReadOnly="true" Variant="Variant.Outlined" @bind-Value="name" Required="true" RequiredError="Campo obrigatório." />

            <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista" Variant="Variant.Outlined" @bind-Value="biography" Lines="4" Required="true" RequiredError="Campo obrigatório." />

            <MudImage Class="mt-4" src="@fileImage" />
            <MudFileUpload T="IBrowserFile" Accept=".jpeg;,.jpg,.png" FilesChanged="UploadFile">
                <ButtonTemplate>
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FileUpload" for="@context">Foto de Perfil</MudButton>
                </ButtonTemplate>
            </MudFileUpload>

            <div class="mt-4">
                <MudText>Deixe sua avaliação:</MudText>
                <MudRating @bind-SelectedValue="rating" @onclick="Review" />
            </div>

            <div class="d-flex justify-space-between align-center mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="Return">Voltar</MudButton>
                <div>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3" @onclick="Delete">Deletar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-3" @onclick="Update"> Salvar</MudButton>
                </div>
            </div>

        </MudForm>
    </MudPaper>
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}

@code {
    private string? name;
    private string? biography;
    private int rating;
    private string? profilePhoto;
    private string? fileImage;
    private string? errorMessage;
    public OutputArtist? OutputArtist { get; set; }
    public OutputArtistReview? OutputArtistReview { get; set; }

    [Parameter]
    public string? Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseArtist = await artistServiceClient.GetByIdentifier(new InputIdentifierArtist(Name!));

        if (responseArtist.Success)
        {
            OutputArtist = responseArtist.Data;
            name = OutputArtist!.Name;
            biography = OutputArtist!.Biography;
            fileImage = $"https://localhost:7089{OutputArtist.ProfilePhoto}";

            var responseArtistReview = await artistServiceClient.GetReview(OutputArtist!.Id);
            if (responseArtistReview.Success)
            {
                OutputArtistReview = responseArtistReview.Data;
                rating = OutputArtistReview!.Rating ?? 0;
            }
            else
                errorMessage = responseArtistReview.ErrorMessage ?? "Erro ao carregar avaliação de artista";
        }
        else
            errorMessage = responseArtist.ErrorMessage ?? "Erro ao carregar artista";        
    }

    private async Task Delete()
    {
        var response = await artistServiceClient.Delete(OutputArtist!.Id);
        if (response.Success)
            navigationManager.NavigateTo("/Artist");
        else
            errorMessage = response.ErrorMessage ?? "Erro ao excluir artista";
    }

    private async Task Update()
    {
        var inputUpdateArtist = new InputUpdateArtist(profilePhoto, biography!);
        var response = await artistServiceClient.Update(OutputArtist!.Id, inputUpdateArtist);
        if (response.Success)
            navigationManager.NavigateTo("/Artist");
        else
            errorMessage = response.ErrorMessage ?? "Erro ao atualizar artista";
    }

    private async Task Review()
    {
        var inputReviewArtist = new InputReviewArtist(rating);
        await artistServiceClient.Review(OutputArtist!.Id, inputReviewArtist);
    }

    private void Return()
    {
        navigationManager.NavigateTo("/Artist");
    }

    private async Task UploadFile(IBrowserFile file)
    {
        var format = "image/jpeg";
        var resizedImage = await file.RequestImageFileAsync(format, 200, 200);

        using var fileStream = resizedImage.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        var imageUpload = Convert.ToBase64String(memoryStream.ToArray());
        fileImage = $"data:{format};base64,{imageUpload}";
        profilePhoto = imageUpload;
    }
}