@page "/CreateMusicGenre"
@using ScreenMusic.Arguments
@inject MusicGenreServiceClient musicGenreServiceClient
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Cadastro do Gênero Musical</MudText>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">
            @errorMessage
        </MudAlert>
    }

    <MudForm>
        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Gênero Musical" Variant="Variant.Outlined" @bind-Value="name" Required="true" RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Descrição do Gênero Musical" Variant="Variant.Outlined" @bind-Value="description" Lines="4" Required="true" RequiredError="Campo obrigatório." />

        <div class="d-flex justify-space-between align-center mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="Return">Voltar</MudButton>
            <div>
                <MudButton Variant="Variant.Filled" @onclick="Create" Color="Color.Primary" Class="ml-auto">Cadastrar</MudButton>
            </div>
        </div>
    </MudForm>
</MudPaper>

@code {
    private string? name;
    private string? description;
    private string? errorMessage;

    private async Task Create()
    {
        var inputCreateMusicGenre = new InputCreateMusicGenre(name!, description!);
        var response = await musicGenreServiceClient.Create(inputCreateMusicGenre);

        if (!response.Success)
            errorMessage = response.ErrorMessage ?? "Erro ao criar gênero musical.";
        else
            navigationManager.NavigateTo("/MusicGenre");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/MusicGenre");
    }
}