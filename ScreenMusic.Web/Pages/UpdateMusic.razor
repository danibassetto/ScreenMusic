@page "/UpdateMusic/{Name}"
@using ScreenMusic.Arguments
@inject ArtistServiceClient artistServiceClient
@inject MusicGenreServiceClient musicGenreServiceClient
@inject MusicServiceClient musicServiceClient
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Música</MudText>

    <ErrorAlert ErrorMessage="@errorMessage" />

    <MudForm>
        <MudTextField Class="mt-4" T="string" Placeholder="Nome da música/canção" @bind-Value="name" Variant="Variant.Outlined" Required="true" RequiredError="Campo obrigatório." />
        <MudTextField Class="mt-4" T="string" Placeholder="Link do Youtube" @bind-Value="youtubeLink" Variant="Variant.Outlined" Required="true" RequiredError="Campo obrigatório." />

        <div class="d-flex justify-content-between align-items-center mt-4">
            <MudSelect Class="mr-2" T="OutputArtist" Label="Artistas" Variant="Variant.Outlined" @bind-Value="OutputArtist" ToStringFunc="GetArtistName">
                @if (ListOutputArtist is not null)
                {
                    @foreach (var artist in ListOutputArtist)
                    {
                        <MudSelectItem Value="artist">@artist.Name</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudNumericField Class="mr-2" T="int" Placeholder="Ano de lançamento" @bind-Value="releaseYear" Variant="Variant.Outlined" Required="true" RequiredError="Campo obrigatório." />

            <MudSelect Class="ml-2" T="OutputMusicGenre" Label="Gênero" Variant="Variant.Outlined" @bind-Value="OutputMusicGenre" ToStringFunc="GetMusicGenreName">
                @if (ListOutputMusicGenre is not null)
                {
                    @foreach (var musicGenre in ListOutputMusicGenre)
                    {
                        <MudSelectItem Value="musicGenre">@musicGenre.Name</MudSelectItem>
                    }
                }
            </MudSelect>
        </div>

        <div class="d-flex justify-space-between align-center mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="Return">Voltar</MudButton>
            <div>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3" @onclick="Delete">Deletar</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-3" @onclick="Update">Salvar</MudButton>
            </div>
        </div>

    </MudForm>

</MudPaper>

@code {
    private int releaseYear;
    private string? youtubeLink;
    private string? name;
    private string? errorMessage;
    private OutputMusicGenre? OutputMusicGenre { get; set; }
    private OutputArtist? OutputArtist { get; set; }
    public OutputMusic? OutputMusic { get; set; }
    private ICollection<OutputArtist>? ListOutputArtist;
    private ICollection<OutputMusicGenre>? ListOutputMusicGenre;

    [Parameter]
    public string? Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseMusic = await musicServiceClient.GetByIdentifier(new InputIdentifierMusic(Name!));
        if (responseMusic.Success)
        {
            OutputMusic = responseMusic.Data;
            releaseYear = OutputMusic!.ReleaseYear;
            name = OutputMusic.Name!;
            youtubeLink = OutputMusic.YoutubeLink;

            var responseArtist = await artistServiceClient.GetById(OutputMusic.ArtistId);
            if (responseArtist.Success)
                OutputArtist = responseArtist.Data;
            else
                errorMessage = responseArtist.ErrorMessage ?? "Erro ao carregar artista.";

            var responseMusicGenre = await musicGenreServiceClient.GetById(OutputMusic.MusicGenreId);
            if (responseMusicGenre.Success)
                OutputMusicGenre = responseMusicGenre.Data;
            else
                errorMessage = responseMusicGenre.ErrorMessage ?? "Erro ao carregar gênero musical.";

            var responseListArtist = await artistServiceClient.GetAll();
            if (responseListArtist.Success)
                ListOutputArtist = responseListArtist.Data;
            else
                errorMessage = responseListArtist.ErrorMessage ?? "Erro ao carregar combo de artistas.";

            var responseListMusicGenre = await musicGenreServiceClient.GetAll();
            if (responseListMusicGenre.Success)
                ListOutputMusicGenre = responseListMusicGenre.Data;
            else
                errorMessage = responseListMusicGenre.ErrorMessage ?? "Erro ao carregar combo de gêneros musicais.";

        }
        else
            errorMessage = responseMusic.ErrorMessage ?? "Erro ao carregar música.";
    }

    private async Task Update()
    {
        if (OutputArtist != null && OutputMusicGenre != null)
        {
            var inputUpdateMusic = new InputUpdateMusic(name!, releaseYear, OutputArtist.Id, OutputMusicGenre.Id, youtubeLink!);
            var response = await musicServiceClient.Update(OutputMusic!.Id, inputUpdateMusic);
            if (response.Success)
                navigationManager.NavigateTo("/Music");
            else
                errorMessage = response.ErrorMessage ?? "Erro ao atualizar música";
        }
    }

    public async Task Delete()
    {
        var response = await musicServiceClient.Delete(OutputMusic!.Id);
        if (response.Success)
            navigationManager.NavigateTo("/Music");
        else
            errorMessage = response.ErrorMessage ?? "Erro ao excluir música";
    }

    private void Return()
    {
        navigationManager.NavigateTo("/Music");
    }

    private string GetArtistName(OutputArtist artist) => artist.Name!;
    private string GetMusicGenreName(OutputMusicGenre musicGenre) => musicGenre.Name!;
}