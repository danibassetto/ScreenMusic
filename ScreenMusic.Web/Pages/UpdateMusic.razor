@page "/UpdateMusic/{Name}"
@using ScreenMusic.Arguments
@inject ArtistServiceClient artistServiceClient
@inject MusicGenreServiceClient musicGenreServiceClient
@inject MusicServiceClient musicServiceClient
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Música</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome da música/canção" @bind-Value="name" Variant="Variant.Outlined" Required="true" RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="OutputArtist" Label="Artistas" Variant="Variant.Outlined" @bind-Value="Artist" ToStringFunc="GetArtistName">
            @if (ListArtist is not null)
            {
                @foreach (var artista in ListArtist)
                {
                    <MudSelectItem Value="artista">@artista.Name</MudSelectItem>
                }
            }
        </MudSelect>

        <MudNumericField Class="mt-4" T="int" Placeholder="Ano de lançamento" @bind-Value="releaseYear" Variant="Variant.Outlined" Required="true" RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="OutputMusicGenre" Label="Gênero" Variant="Variant.Outlined" @bind-Value="MusicGenre" ToStringFunc="GetMusicGenreName">
            @if (ListMusicGenre is not null)
            {
                @foreach (var genero in ListMusicGenre)
                {
                    <MudSelectItem Value="genero">@genero.Name</MudSelectItem>
                }
            }
        </MudSelect>

        <div class="d-flex justify-space-between align-center mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="Return">Voltar</MudButton>
            <div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-3" @onclick="Update">Salvar</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3" @onclick="Delete">Deletar</MudButton>
            </div>
        </div>

    </MudForm>

</MudPaper>

@code {
    private int releaseYear;
    private string? name;
    private OutputMusicGenre? MusicGenre { get; set; }
    private OutputArtist? Artist { get; set; }
    public OutputMusic? Music { get; set; }
    private ICollection<OutputArtist>? ListArtist;
    private ICollection<OutputMusicGenre>? ListMusicGenre;

    [Parameter]
    public string? Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Music = await musicServiceClient.GetByName(new InputIdentifierMusic(Name!));
        releaseYear = Music!.ReleaseYear;
        name = Music.Name!;
        Artist = await artistServiceClient.GetById(Music.ArtistaId);
        MusicGenre = await musicGenreServiceClient.GetById(Music.MusicGenreId);
        ListArtist = await artistServiceClient.GetAll();
        ListMusicGenre = await musicGenreServiceClient.GetAll();
    }

    private async Task Update()
    {
        if (Artist != null && MusicGenre != null)
        {
            var requestEdit = new InputUpdateMusic(name!, releaseYear, Artist.Id, MusicGenre.Id);
            await musicServiceClient.Update(Music!.Id, requestEdit);
            navigationManager.NavigateTo("/MusicByArtist");
        }
    }

    public async Task Delete()
    {
        await musicServiceClient.Delete(Music!.Id);
        navigationManager.NavigateTo("/MusicByArtist");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/MusicByArtist");
    }

    private string GetArtistName(OutputArtist artist) => artist.Name;
    private string GetMusicGenreName(OutputMusicGenre genre) => genre.Name;
}