@page "/UpdateMusicGenre/{Name}"
@using ScreenMusic.Arguments
@inject MusicGenreServiceClient musicGenreServiceClient
@inject NavigationManager navigationManager

@if (MusicGenre is not null)
{
    <MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

        <MudText Class="mt-8" Typo="Typo.h4">Edição de Gênero Musical</MudText>

        <MudForm>

            <MudTextField Class="mt-4" T="string" Placeholder="Nome do Gênero Musical" ReadOnly="true" Variant="Variant.Outlined" @bind-Value="name" Required="true" RequiredError="Campo obrigatório." />

            <MudTextField Class="mt-4" T="string" Placeholder="Descrição do Gênero Musical" Variant="Variant.Outlined" @bind-Value="description" Lines="4" Required="true" RequiredError="Campo obrigatório." />

            <div class="d-flex justify-space-between align-center mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="Return">Voltar</MudButton>
                <div>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3" @onclick="Delete">Deletar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-3" @onclick="Update"> Salvar</MudButton>
                </div>
            </div>

        </MudForm>
    </MudPaper>
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}

@code {
    private string? name;
    private string? description;
    public OutputMusicGenre? MusicGenre { get; set; }

    [Parameter]
    public string? Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MusicGenre = await musicGenreServiceClient.GetByIdentifier(new InputIdentifierMusicGenre(Name!));
        name = MusicGenre!.Name;
        description = MusicGenre!.Description;
    }

    private async Task Delete()
    {
        await musicGenreServiceClient.Delete(MusicGenre!.Id);
        navigationManager.NavigateTo("/MusicGenre");
    }

    private async Task Update()
    {
        var inputUpdateMusicGenre = new InputUpdateMusicGenre(MusicGenre?.Description!);
        await musicGenreServiceClient.Update(MusicGenre!.Id, inputUpdateMusicGenre);
        navigationManager.NavigateTo("/MusicGenre");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/MusicGenre");
    }
}