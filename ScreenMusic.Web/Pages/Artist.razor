@page "/Artist"
@using ScreenMusic.Arguments
@inject ArtistServiceClient artistServiceClient

<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Artistas cadastrados</MudText>
    <MudPagination Count="@totalPage" SelectedChanged="PageChange"></MudPagination>
</MudStack>

<ErrorAlert ErrorMessage="@errorMessage" />

@if (ListOutputArtistByPage is not null)
{
    <MudGrid>
        @foreach (var artist in ListOutputArtistByPage)
        {
            <MudItem xs="3">
                <CardArtist Artist="artist" />
            </MudItem>
        }
    </MudGrid>
}

@code {
    private int tamanho = 8;
    private int totalItem;
    private int totalPage;
    private string? errorMessage;
    private ICollection<OutputArtist>? ListOutputArtist;
    private ICollection<OutputArtist>? ListOutputArtistByPage;

    protected override async Task OnInitializedAsync()
    {
        var response = await artistServiceClient.GetAll();

        if (response.Success)
        {
            ListOutputArtist = response.Data;

            if (ListOutputArtist is not null)
            {
                ListOutputArtist = ListOutputArtist.OrderBy(a => a.Name).ToList();
                totalItem = ListOutputArtist.Count();
                totalPage = Convert.ToInt32(Math.Ceiling((totalItem * 1.0) / tamanho));
                this.PageChange(1);
            }
        }
        else
            errorMessage = response.ErrorMessage ?? "Erro ao listar artistas.";
    }

    private void PageChange(int pageNumber)
    {
        var indice = pageNumber - 1;
        ListOutputArtistByPage = ListOutputArtist!.Skip(tamanho * indice).Take(tamanho).ToList();
    }
}