// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScreenMusic.Infraestructure;

#nullable disable

namespace ScreenMusic.Api.Migrations
{
    [DbContext(typeof(ScreenMusicContext))]
    [Migration("20240529222219_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ScreenMusic.Domain.Entities.Artist", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("VARCHAR(350)")
                        .HasColumnName("biografia");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("nome");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("foto_perfil");

                    b.HasKey("Id");

                    b.ToTable("artista", (string)null);
                });

            modelBuilder.Entity("ScreenMusic.Domain.Entities.Music", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ArtistaId")
                        .IsRequired()
                        .HasColumnType("BIGINT")
                        .HasColumnName("id_artista");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_cadastro");

                    b.Property<long?>("MusicGenreId")
                        .IsRequired()
                        .HasColumnType("BIGINT")
                        .HasColumnName("id_genero_musical");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("nome");

                    b.Property<int?>("ReleaseYear")
                        .IsRequired()
                        .HasColumnType("INT")
                        .HasColumnName("ano_lancamento");

                    b.HasKey("Id");

                    b.HasIndex("ArtistaId");

                    b.HasIndex("MusicGenreId");

                    b.ToTable("musica", (string)null);
                });

            modelBuilder.Entity("ScreenMusic.Domain.Entities.MusicGenre", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("descricao");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("genero_musical", (string)null);
                });

            modelBuilder.Entity("ScreenMusic.Domain.Entities.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("CreationDate")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("senha");

                    b.Property<DateTime?>("TokenExpirationDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_expiracao_token");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("ScreenMusic.Domain.Entities.Music", b =>
                {
                    b.HasOne("ScreenMusic.Domain.Entities.Artist", "Artist")
                        .WithMany("ListMusic")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScreenMusic.Domain.Entities.MusicGenre", "MusicGenre")
                        .WithMany("ListMusic")
                        .HasForeignKey("MusicGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("MusicGenre");
                });

            modelBuilder.Entity("ScreenMusic.Domain.Entities.Artist", b =>
                {
                    b.Navigation("ListMusic");
                });

            modelBuilder.Entity("ScreenMusic.Domain.Entities.MusicGenre", b =>
                {
                    b.Navigation("ListMusic");
                });
#pragma warning restore 612, 618
        }
    }
}
